<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>cs on DHQwords</title><link>https://rlskoeser.github.io/dhqwords/categories/cs/</link><description>Recent content in cs on DHQwords</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>cdh-info@princeton.edu</managingEditor><webMaster>cdh-info@princeton.edu</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NoDerivatives 4.0 International License.</copyright><lastBuildDate>Thu, 20 Jul 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://rlskoeser.github.io/dhqwords/categories/cs/index.xml" rel="self" type="application/rss+xml"/><item><title>BASIC FTBALL and Computer Programming for All</title><link>https://rlskoeser.github.io/dhqwords/vol/17/2/000696/</link><pubDate>Thu, 20 Jul 2023 00:00:00 +0000</pubDate><author>Annette Vee</author><guid>https://rlskoeser.github.io/dhqwords/vol/17/2/000696/</guid><description>In late fall 1965, John Kemeny wrote a 239-line BASIC program called FTBALL***. Along with his colleague Thomas Kurtz and a few work-study students at Dartmouth College, Kemeny had developed the BASIC programming language and Dartmouth Time-Sharing System (DTSS), both of which went live on May 1, 1964. BASIC and DTSS represented perhaps the earliest successful attempt at programming for all, combining English-language vocabulary (e.g.,
HELLO instead of
LOGON ), simple yet robust instructions, and near-realtime access to a mainframe computer.</description></item><item><title>Nonsense Code: A Nonmaterial Performance</title><link>https://rlskoeser.github.io/dhqwords/vol/17/2/000702/</link><pubDate>Thu, 20 Jul 2023 00:00:00 +0000</pubDate><author>Barry Rountree, William Condee</author><guid>https://rlskoeser.github.io/dhqwords/vol/17/2/000702/</guid><description>1. Happy Birthday, Nonsense, and Nonmaterial Performance Note that programming the UNIVAC 1 is done with pencil, paper, and flow charts.[^sperryrand1959] Assembly language instructions for the UNIVAC 1.[^koss2003] Consider a somewhat mysterious computer tape from the early 1950s that was run a handful of times each year on Lawrence Livermore National Laboratory’s (LLNL) UNIVAC 1 computer. The code is easy enough to describe. Single instructions are repeated thousands of times, but the results of those instructions are discarded.</description></item><item><title>ᐊᒐᐦᑭᐯᐦᐃᑲᓇ ᒫᒥᑐᓀᔨᐦᐃᒋᑲᓂᐦᑳᓂᕽ | acahkipehikana mâmitoneyihicikanihkânihk | Programming with Cree# and Ancestral Code: Nehiyawewin Spirit Markings in an Artificial Brain</title><link>https://rlskoeser.github.io/dhqwords/vol/17/2/000699/</link><pubDate>Thu, 20 Jul 2023 00:00:00 +0000</pubDate><author>Jon Corbett</author><guid>https://rlskoeser.github.io/dhqwords/vol/17/2/000699/</guid><description>Introduction Nohkompan,1 my paternal grandmother, was Nehiyaw (Cree) and Saulteaux (Chippewa). After her passing and understanding the matriarchal nature of many Cree peoples, I found myself looking at the Nehiyaw culture of her mother, Nitâpân ,2 for inspiration for my creative works. In 2014, I attempted to use Nehiyawewin (the Cree language) words as variables using the Unified Canadian Aboriginal Syllabics 3. My early attempts were instantly problematic because the development environments (IDEs) I used would render the syllabics, like ᑖ, as empty boxes ⌧.</description></item></channel></rss>